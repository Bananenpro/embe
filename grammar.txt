program-> topLevel*
topLevel->event|variableDecl|constDecl|funcDecl

event-> '@' IDENTIFIER LITERAL? ':' '\n' statement*

variableDecl-> 'var' IDENTIFIER (':' TYPE) ('=' expression)? '\n'
constDecl-> 'const' IDENTIFIER (':' TYPE) '=' LITERAL '\n'
funcDecl-> 'func' IDENTIFIER '(' (IDENTIFIER ':' TYPE (',' IDENTIFIER ':' TYPE)*)? ')' ':' '\n' statement*

statement-> (funcCall|assignment|if|while|for)
funcCall->identifier '(' ((expression) (',' (expression))*)? ')' '\n'
assignment->identifier ('='|'+='|'-='|'*='|'/=') expression '\n'
if-> 'if' expression ':' '\n' statement* ('elif' ':' expression ':' '\n' statement*)* ('else' ':' '\n' statement*)?
while-> 'while' expression? ':' '\n' statement*
for-> 'for' expression? ':' '\n' statement*

expression->or
or -> and ('||' and)*
and -> equality ('&&' equality)*
equality -> comparison (('=='|'!=') comparison)*
comparison -> term (('>'|'>='|'<'|'<=') term)*
term -> factor (('+'|'-') factor)*
factor -> unary ('*'|'/'|'%') unary)*
unary -> ('-'|'!') unary | primary
primary-> identifier | LITERAL | '(' expression ')' | exprFuncCall | typeCast
exprFuncCall-> identifier '(' ((expression) (',' (expression))*)? ')'
listInitializer-> [' ((IDENTIFIER|LITERAL) (',' (IDENTIFIER|LITERAL))*)? ']'

typeCast->TYPE '(' expression ')'

identifier-> IDENTIFIER ('.' IDENTIFIER)*
