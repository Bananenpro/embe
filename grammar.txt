program-> topLevel*
topLevel->event

event-> '@' IDENTIFIER LITERAL? ':' statement*

variableDecl-> 'var' IDENTIFIER (':' TYPE) ('=' expression)?
constDecl-> 'const' IDENTIFIER (':' TYPE) '=' LITERAL

statement-> (funcCall|assignment|if|while|for)
funcCall->identifier '(' ((expression) (',' (expression))*)? ')' '\n'
assignment->identifier ('='|'+='|'-='|'*='|'/=') expression '\n'
if-> 'if' expression ':' '\n' statement* ('elif' ':' expression ':' '\n' statement*)* ('else' ':' '\n' statement*)?
while-> 'while' expression? ':' '\n' statement*
for-> 'for' expression? ':' '\n' statement*

expression->or
or -> and ('||' and)*
and -> equality ('&&' equality)*
equality -> comparison (('=='|'!=') comparison)*
comparison -> term (('>'|'>='|'<'|'<=') term)*
term -> factor (('+'|'-') factor)*
factor -> unary ('*'|'/'|'%') unary)*
unary -> ('-'|'!') unary | primary
primary->identifier | LITERAL | '(' expression ')' | exprFuncCall
exprFuncCall->identifier '(' ((expression) (',' (expression))*)? ')'

identifier-> IDENTIFIER ('.' IDENTIFIER)*
